// Generated by LiveScript 1.6.0
(function(){
  window.onload = function(){
    var console, vueModel, save, load;
    console = chrome.extension.getBackgroundPage().console;
    vueModel = new Vue({
      el: '#app',
      data: {
        input: {
          addStock: "2330"
        },
        stockInfo: {}
      },
      methods: {
        clickAddStock: function(id){
          return chrome.windows.getCurrent(function(w){
            return chrome.tabs.create({
              windowId: w.id,
              url: "https://goodinfo.tw/StockInfo/ShowK_Chart.asp?STOCK_ID=" + id + "&CHT_CAT2=DATE"
            }, function(t){});
          });
        },
        clickCompute: function(id, earnRate, count){
          var start, rows;
          start = Math.max(0, vueModel.stockInfo[id].rows.length - count);
          rows = vueModel.stockInfo[id].rows.slice(start, vueModel.stockInfo[id].rows.length);
          this.stockInfo[id].compute.earnRate = earnRate;
          this.stockInfo[id].compute.count = count;
          this.stockInfo[id].compute.result = checkLowHighEarn(earnRate, rows);
          return save(function(){});
        }
      }
    });
    save = function(cb){
      var model, k, ref$, _;
      model = JSON.parse(JSON.stringify(vueModel.$data));
      for (k in ref$ = model.stockInfo) {
        _ = ref$[k];
        if (model.stockInfo[k].compute) {
          delete model.stockInfo[k].compute.result;
        }
      }
      return chrome.storage.local.set({
        "stockInfo": model.stockInfo
      }, cb);
    };
    load = function(cb){
      return chrome.storage.local.get(null, function(obj){
        var k, ref$, v, start, rows;
        for (k in ref$ = obj.stockInfo) {
          v = ref$[k];
          if (!v.compute) {
            v.compute = {
              earnRate: 0.01,
              count: 20,
              result: null
            };
          }
          start = Math.max(0, v.rows.length - v.compute.count);
          rows = v.rows.slice(start, v.rows.length);
          v.compute.result = checkLowHighEarn(v.compute.earnRate, rows);
        }
        return vueModel.stockInfo = obj.stockInfo;
      });
    };
    load();
    return chrome.extension.onMessage.addListener(function(obj){
      var cmd, info;
      cmd = obj.cmd, info = obj.info;
      switch (cmd) {
      case "update":
        return load();
      default:

      }
    });
  };
}).call(this);
