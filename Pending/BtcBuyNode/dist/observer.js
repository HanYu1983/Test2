// Generated by LiveScript 1.6.0
(function(){
  var websocket, observe, out$ = typeof exports != 'undefined' && exports || this;
  websocket = require('websocket');
  out$.observe = observe = function(cfg, symbol, foundcb){
    var observeRate, observeSeconds, local, pushHistory, check, client, client2;
    observeRate = cfg.observeRate, observeSeconds = cfg.observeSeconds;
    local = {
      history: []
    };
    pushHistory = function(trade){
      var now;
      now = trade.date;
      return local.history.push(trade);
    };
    check = function(){
      var ref$, now, tmp, prices, min, max, rate;
      if (local.history.length === 0) {
        return 0;
      }
      now = (ref$ = local.history)[ref$.length - 1].date;
      tmp = local.history.filter(function(arg$){
        var curr;
        curr = arg$.date;
        return now - curr < observeSeconds * 1000;
      });
      prices = tmp.map(function(arg$){
        var price;
        price = arg$.price;
        return price;
      });
      min = Math.min.apply(null, prices);
      max = Math.max.apply(null, prices);
      rate = (max - min) / min;
      local.history = tmp;
      return rate;
    };
    client = new websocket.client();
    client.on('connectFailed', function(error){
      return console.log('Connect Error: ' + error.toString());
    });
    client.on('connect', function(connection){
      console.log('WebSocket Client Connected');
      connection.on('error', function(error){
        return console.log("Connection Error: " + error.toString());
      });
      connection.on('close', function(){
        return console.log('echo-protocol Connection Closed');
      });
      return connection.on('message', function(message){
        var data, price, date, rate;
        if (message.type === 'utf8') {
          data = JSON.parse(message.utf8Data);
          price = data.p, date = data.T;
          pushHistory({
            price: price,
            date: date
          });
          rate = check();
          if (rate > observeRate) {
            return foundcb({
              history: local.history,
              rate: rate
            });
          }
        }
      });
    });
    client.connect("wss://stream.binance.com:9443/ws/" + symbol + "@trade");
    client2 = new websocket.client();
    client2.on('connectFailed', function(error){
      return console.log('Connect Error: ' + error.toString());
    });
    return client2.on('connect', function(connection){
      console.log('WebSocket Client Connected');
      connection.on('error', function(error){
        return console.log("Connection Error: " + error.toString());
      });
      connection.on('close', function(){
        return console.log('echo-protocol Connection Closed');
      });
      return connection.on('message', function(message){
        var data;
        if (message.type === 'utf8') {
          data = JSON.parse(message.utf8Data);
          return console.log(data);
        }
      });
    });
  };
}).call(this);
