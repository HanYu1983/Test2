<html>
  <head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
var origin = @html.raw(model.data)
google.charts.load('current', {'packages':['corechart']});
google.charts.setOnLoadCallback(start);

function start(){
    checkStyle(origin)
    drawKline()
    drawKd()
    drawAvg("curve_chart2", 5, 10)
    drawAvg("curve_chart3", 2, 20)
    drawEnergy('curve_chart4', 20)
}

function drawKline() {
    var data = google.visualization.arrayToDataTable(origin, true);

    var options = {
        legend:'none'
    };

    var chart = new google.visualization.CandlestickChart(document.getElementById('chart_div'));

    chart.draw(data, options);
}

function drawEnergy(div, cnt){
    var line = []
    for(var i=(cnt-1); i<origin.length; ++i){
        var total = 0
        for(var j=0; j<(cnt-1); ++j){
            var currPos = i-j
            var prevPos = currPos-1
            var rate = (origin[currPos][3]-origin[prevPos][3])/origin[prevPos][3]
            total += rate
        }
        total /= cnt
        line.push(total)
    }
    
    var data = []
    for(var i=0; i<origin.length; ++i){
        [openTime] = origin[i]
        if(i<(cnt-1)){
            data.push([openTime, line[0]])
            continue
        }
        data.push([openTime, line[i-(cnt-1)]])
    }

    data = [['time', cnt+'']].concat(data)
    data = google.visualization.arrayToDataTable(data)

    var options = {
        title: 'Company Performance',
        curveType: 'function',
        legend: { position: 'bottom' }
    };

    var chart = new google.visualization.LineChart(document.getElementById(div));

    chart.draw(data, options);
}

function drawAvg(div, cnt, cnt2) {
    var avgLine = []
    for(var i=cnt-1; i<origin.length; ++i){
        var avg = origin.slice(i-(cnt-1), i+1).map(([_, _2, _3, close])=>close).reduce((acc, curr)=>acc+curr, 0)/cnt
        avgLine.push(avg)
    }

    var avgLine2 = []
    for(var i=cnt2-1; i<origin.length; ++i){
        var avg = origin.slice(i-(cnt2-1), i+1).map(([_, _2, _3, close])=>close).reduce((acc, curr)=>acc+curr, 0)/cnt2
        avgLine2.push(avg)
    }
    
    checkEarn(origin, avgLine2, avgLine)

    var data = []
    for(var i=0; i<origin.length; ++i){
        [openTime] = origin[i]
        if(i<(cnt-1)){
            data.push([openTime, avgLine[0], avgLine2[0]])
            continue
        } else if(i < (cnt2-1)){
            data.push([openTime, avgLine[i-(cnt-1)], avgLine2[0]])
            continue
        }
        data.push([openTime, avgLine[i-(cnt-1)], avgLine2[i-(cnt2-1)]])
    }

    data = [['time', cnt+'', cnt2+'']].concat(data)
    data = google.visualization.arrayToDataTable(data)

    var options = {
        title: 'Company Performance',
        curveType: 'function',
        legend: { position: 'bottom' }
    };

    var chart = new google.visualization.LineChart(document.getElementById(div));

    chart.draw(data, options);
}

var startKdCount = 8

function drawKd() {
    var rsvLine = []

    for(var i=startKdCount; i<origin.length; ++i){
        [openTime, low, open, close, high] = origin[i]
        var before9k = origin.slice(i-startKdCount, i+1)
        var min9k = Math.min.apply(null, before9k.map(([_, low])=>low))
        var max9k = Math.max.apply(null, before9k.map(([_, _2, _3, _4, high])=>high))
        var rsv = (close - min9k)*100/(max9k - min9k)
        rsvLine.push(rsv)
    }

    var kline = []
    var dline = []
    for(var i=0; i<rsvLine.length; ++i){
        var rsv = rsvLine[i]
        var prevK = 50
        var prevD = 50
        if(i>0){
            prevK = kline[i-1]
            prevD = dline[i-1]
        }
        var k = prevK * (2/3) + rsv/3
        var d = prevD * (2/3) + k/3
        kline.push(k)
        dline.push(d)
    }
    
    checkEarn(origin, kline, dline)

    var data = []
    for(var i=0; i<origin.length; ++i){
        [openTime] = origin[i]
        if(i<startKdCount){
            data.push([openTime, 50, 50])
            continue
        }
        data.push([openTime, kline[i-startKdCount], dline[i-startKdCount]])
    }

    data = [['time', 'k', 'd']].concat(data)
    data = google.visualization.arrayToDataTable(data)

    var options = {
        title: 'Company Performance',
        curveType: 'function',
        legend: { position: 'bottom' }
    };

    var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

    chart.draw(data, options);
}

function checkEarn(origin, kline, dline){
    var orders = []
    for(var i=1; i<kline.length; ++i){
        var prevK = kline[i-1]
        var prevD = dline[i-1]
        var k = kline[i]
        var d = dline[i]
        if(prevK <= prevD && k > d && i<kline.length-1){
            // cold cross
            var originId = startKdCount+i+1
            var date = origin[originId][0]
            var open = origin[originId][2]
            var buyPrice = open
            orders.push({
                "action":"buy",
                "price":buyPrice,
                "date":date
            })
        }
        
        if(prevK >= prevD && k < d && i<kline.length-1){
            // died cross
            var originId = startKdCount+i+1
            var date = origin[originId][0]
            var open = origin[originId][2]
            var buyPrice = open
            orders.push({
                "action":"sell",
                "price":buyPrice,
                "date":date
            })
        }
    }
    
    console.log(orders)
    
    var amount = 1
    var storage = 0
    var money = 0
    var useMoney = 0
    var rate = []
    var gas = 0.001425

    for(var i=0; i<orders.length; ++i){
        var order = orders[i]
        if(order.action == "buy"){
            if(storage != 0){
                console.log('has storage')
            } else {
                var price = order.price*amount
                money -= price + price * gas
                storage = price
                useMoney = price + price * gas
            }
        }
        
        if(order.action == "sell"){
            if(storage == 0){
                console.log("no storage")
            } else {
                var price = order.price*amount
                var earn = price - price * gas
                money += earn
                storage = 0
                
                earnRate = ((earn - useMoney)/useMoney)
                rate.push(earnRate)
            }
        }
    }
    
    var earnRateAvg = rate.reduce((a,b)=>a+b, 0)/rate.length
    var transactionTime = rate.length
    var useMoneyPerTranaction = 100000
    var totalEarn = (useMoneyPerTranaction*earnRateAvg)*transactionTime
    var totalEarnRate = (totalEarn + useMoneyPerTranaction)/useMoneyPerTranaction
    console.log(
        "股價", storage,
        "股數", useMoneyPerTranaction/ storage,
        "金流", money, 
        "單筆交易平均獲利率", earnRateAvg, 
        "獲利", totalEarn, 
        "獲利率", totalEarnRate
    )
    //console.log(rate)
}

function checkStyle(origin){
    var total = 0
    for(var i=1; i<origin.length; ++i){
        var prev = origin[i-1][3]
        var curr = origin[i][3]
        var rate = (curr-prev)/prev
        total += rate
    }
    console.log('style:', total/(origin.length-1))
}

    </script>
  </head>
  <body>
    <div id="chart_div" style="width: 900px; height: 500px;"></div>
    <div id="curve_chart" style="width: 900px; height: 500px"></div>
    <div id="curve_chart2" style="width: 900px; height: 500px"></div>
    <div id="curve_chart3" style="width: 900px; height: 500px"></div>
    <div id="curve_chart4" style="width: 900px; height: 500px"></div>
  </body>
</html>