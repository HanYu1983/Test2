// Generated by LiveScript 1.6.0
(function(){
  var express, path, request, async, crypto, fs, fetch, fetchStockData, formatStockData, Close, Low, High, MA, RSV, KD, reductions, mapn, YuMA, EMA, MACDDIF, MACDDEM, BBI, EBBI, AccDist, Chaikin, TrueLow, TrueWave, UOS, checkSignal2, checkSignal, checkEarn, app;
  express = require('express');
  path = require('path');
  request = require('request');
  async = require('async');
  crypto = require('crypto');
  fs = require('fs');
  /*
  file = "./test.db"
  sqlite3 = require("sqlite3").verbose()
  db = new sqlite3.Database file
  
  db.serialize ->
      db.run "CREATE TABLE IF NOT EXISTS  Stuff (thing TEXT)"
      stmt = db.prepare "INSERT INTO Stuff VALUES (?)"
  
      for _, i in [0 to 10]
          stmt.run "staff_number#{i}"
      
      stmt.finalize()
      db.each "SELECT rowid AS id, thing FROM Stuff", (err, row)->
          console.log row.id + ": " + row.thing
  
  db.close()
  
  */
  fetch = curry$(function(url, dontUseCache, cb){
    var urlKey, path, ws;
    urlKey = crypto.createHash('md5').update(url).digest('hex');
    path = "cache/" + urlKey + ".html";
    if (!!dontUseCache === false && fs.existsSync(path)) {
      return fs.readFile(path, 'utf8', cb);
    } else {
      ws = fs.createWriteStream(path).on('error', cb).on('finish', function(){
        if (fs.existsSync(path) === false) {
          return cb('save lost');
        } else {
          return fs.readFile(path, 'utf8', cb);
        }
      });
      return request.get(url).on('error', cb).pipe(ws);
    }
  });
  fetchStockData = function(stockId, years, months, cb){
    var urls, y, m;
    urls = Array.prototype.map.call((function(){
      var i$, ref$, len$, j$, ref1$, len1$, results$ = [];
      for (i$ = 0, len$ = (ref$ = years).length; i$ < len$; ++i$) {
        y = ref$[i$];
        for (j$ = 0, len1$ = (ref1$ = months).length; j$ < len1$; ++j$) {
          m = ref1$[j$];
          results$.push([y, m]);
        }
      }
      return results$;
    }()), function(arg$){
      var y, m;
      y = arg$[0], m = arg$[1];
      return "http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=" + y + (m + '').padStart(2, '0') + "01&stockNo=" + stockId;
    });
    return async.series(urls.map(function(url){
      return fetch(url, false);
    }), function(err, results){
      return cb(err, results);
    });
  };
  formatStockData = function(data){
    var format;
    data = data.filter(function(r){
      return r.trim() !== "";
    }).map(JSON.parse).filter(function(arg$){
      var stat;
      stat = arg$.stat;
      return stat === "OK";
    }).reduce(function(acc, arg$){
      var data;
      data = arg$.data;
      return acc.concat(data);
    }, []);
    format = function(arg$){
      var openTime, _, open, high, low, close, volumn;
      openTime = arg$[0], _ = arg$[1], _ = arg$[2], open = arg$[3], high = arg$[4], low = arg$[5], close = arg$[6], _ = arg$[7], volumn = arg$[8];
      return [new Date(openTime).toString()].concat([low, open, close, high, volumn].map(parseFloat));
    };
    return data.map(format);
  };
  Close = function(data){
    return data.map(function(arg$){
      var _, close;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], close = arg$[3];
      return close;
    });
  };
  Low = function(data){
    return data.map(function(arg$){
      var _, low;
      _ = arg$[0], low = arg$[1], _ = arg$[2], _ = arg$[3];
      return low;
    });
  };
  High = function(data){
    return data.map(function(arg$){
      var _, high;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], high = arg$[4];
      return high;
    });
  };
  MA = function(cnt, data){
    var ret, res$, i$, ref$, len$, i, avg;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      res$.push(avg = data.slice(i - (cnt - 1), i + 1).reduce(fn1$, 0) / cnt);
    }
    ret = res$;
    return (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = cnt - 1; i$ < to$; ++i$) {
        results$.push(ret[0]);
      }
      return results$;
    }()).concat(ret);
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = cnt - 1, to$ = data.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(acc, curr){
      return acc + curr;
    }
  };
  RSV = function(cnt, data){
    var ret, res$, i$, ref$, len$, i, ref1$, openTime, low, open, close, high, before9k, min9k, max9k, rsv;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      ref1$ = data[i], openTime = ref1$[0], low = ref1$[1], open = ref1$[2], close = ref1$[3], high = ref1$[4];
      before9k = data.slice(i - (cnt - 1), i + 1);
      min9k = Math.min.apply(null, before9k.map(fn1$));
      max9k = Math.max.apply(null, before9k.map(fn2$));
      res$.push(rsv = (close - min9k) * 100 / (max9k - min9k));
    }
    ret = res$;
    return (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = cnt - 1; i$ < to$; ++i$) {
        results$.push(ret[0]);
      }
      return results$;
    }()).concat(ret);
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = cnt - 1, to$ = data.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(arg$){
      var _, low;
      _ = arg$[0], low = arg$[1];
      return low;
    }
    function fn2$(arg$){
      var _, high;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], high = arg$[4];
      return high;
    }
  };
  KD = function(data){
    var kline, dline, i$, ref$, len$, i, rsv, prevK, prevD, k, d;
    kline = [];
    dline = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      rsv = data[i];
      prevK = i > 0 ? kline[i - 1] : 50;
      prevD = i > 0 ? dline[i - 1] : 50;
      k = prevK * (2 / 3) + rsv / 3;
      d = prevD * (2 / 3) + k / 3;
      kline.push(k);
      dline.push(d);
    }
    return [kline, dline];
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = data.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  reductions = function(f, i, seq){
    return seq.reduce(function(acc, v){
      var prev, curr;
      prev = acc[acc.length - 1];
      curr = f(prev, v);
      return acc.concat([curr]);
    }, [i]);
  };
  mapn = function(f){
    var args, res$, i$, to$, maxLength, ref$, len$, i, results$ = [];
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    maxLength = Math.min.apply(null, args.map(function(it){
      return it.length;
    }));
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      results$.push(f.apply(null, args.map(fn1$)));
    }
    return results$;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = maxLength; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(ary){
      return ary[i];
    }
  };
  YuMA = function(n, data){
    var fv, ret;
    if (data.length >= n) {
      fv = data.slice(0, n).reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / n;
      ret = reductions(function(ma, v){
        return ma * ((n - 1) / n) + v / n;
      }, fv, data.slice(n, data.length));
      return (function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = n - 1; i$ < to$; ++i$) {
          results$.push(ret[0]);
        }
        return results$;
      }()).concat(ret);
    }
  };
  EMA = function(n, data){
    var fv, alpha, ret;
    if (data.length >= n) {
      fv = data.slice(0, n).reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / n;
      alpha = 2 / (n + 1);
      ret = reductions(function(ema, v){
        return (v - ema) * alpha + ema;
      }, fv, data.slice(n, data.length));
      return (function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = n - 1; i$ < to$; ++i$) {
          results$.push(ret[0]);
        }
        return results$;
      }()).concat(ret);
    }
  };
  MACDDIF = function(n, m, data){
    return mapn(curry$(function(x$, y$){
      return x$ - y$;
    }), EMA(n, data), EMA(m, data));
  };
  MACDDEM = EMA;
  BBI = function(n, m, o, p, data){
    var l1, l2, l3, l4;
    l1 = MA(n, data);
    l2 = MA(m, data);
    l3 = MA(o, data);
    l4 = MA(p, data);
    return mapn(function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return args.reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / args.length;
    }, l1, l2, l3, l4);
  };
  EBBI = function(n, m, o, p, data){
    var l1, l2, l3, l4;
    l1 = EMA(n, data);
    l2 = EMA(m, data);
    l3 = EMA(o, data);
    l4 = EMA(p, data);
    return mapn(function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return args.reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / args.length;
    }, l1, l2, l3, l4);
  };
  AccDist = function(data){
    var ret;
    ret = reductions(curry$(function(x$, y$){
      return x$ + y$;
    }), 0, data.map(function(arg$){
      var _, low, open, close, high, volume;
      _ = arg$[0], low = arg$[1], open = arg$[2], close = arg$[3], high = arg$[4], volume = arg$[5];
      if (high === low) {
        return 0;
      } else {
        return ((close - low) - (high - close)) * volume / (high - low);
      }
    }));
    return ret.slice(1, ret.length);
  };
  Chaikin = function(n, m, data){
    var acc;
    acc = AccDist(data);
    return mapn(curry$(function(x$, y$){
      return x$ - y$;
    }), EMA(n, acc), EMA(m, acc));
  };
  TrueLow = function(data){
    var ret;
    ret = mapn(Math.min, Close(data), Low(data.slice(1, data.length)));
    return Low([data[0]]).concat(ret);
  };
  TrueWave = function(data){
    var ret;
    ret = mapn(function(close, high, low){
      return Math.max(high - low, Math.abs(high - close), Math.abs(low - close));
    }, Close(data), High(data).slice(1, data.length), Low(data).slice(1, data.length));
    return High([data[0]]).concat(ret);
  };
  UOS = function(m, n, o, data){
    var tl, bp, tr, ruo, uos;
    tl = TrueLow(data);
    bp = mapn(curry$(function(x$, y$){
      return x$ - y$;
    }), Close(data), tl);
    tr = TrueWave(data);
    ruo = mapn(function(b1, b2, b3, t1, t2, t3){
      return (b1 / t1) * 4 + (b2 / t2) * 2 + b3 / t3;
    }, MA(m, bp).map((function(it){
      return it * m;
    })), MA(n, bp).map((function(it){
      return it * n;
    })), MA(o, bp).map((function(it){
      return it * o;
    })), MA(m, tr).map((function(it){
      return it * m;
    })), MA(n, tr).map((function(it){
      return it * n;
    })), MA(o, tr).map((function(it){
      return it * o;
    })));
    return uos = ruo.map(function(n){
      return n * (100 / 7);
    });
  };
  checkSignal2 = function(line1, line2, data){
    var orders, i$, ref$, len$, i, prevK, prevD, k, d, date, open, buyPrice;
    orders = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      prevK = line1[i - 1];
      prevD = line2[i - 1];
      k = line1[i];
      d = line2[i];
      if (prevK <= prevD && k > d && i < line1.length - 1) {
        date = data[i][0];
        open = data[i][2];
        buyPrice = open;
        orders.push({
          action: "buy",
          price: buyPrice,
          date: date
        });
      }
      if (prevK >= prevD && k < d && i < line1.length - 1) {
        date = data[i][0];
        open = data[i][2];
        buyPrice = open;
        orders.push({
          action: "sell",
          price: buyPrice,
          date: date
        });
      }
    }
    return orders;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = line1.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  checkSignal = function(line, buyLine, sellLine, data){
    var orders, i$, ref$, len$, i, prevL, prevB, prevS, l, b, s, date, open, buyPrice;
    orders = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      prevL = line[i - 1];
      prevB = buyLine[i - 1];
      prevS = sellLine[i - 1];
      l = line[i];
      b = buyLine[i];
      s = sellLine[i];
      if (prevL <= prevB && l > b && i < line.length - 1) {
        date = data[i][0];
        open = data[i][2];
        buyPrice = open;
        orders.push({
          action: "buy",
          price: buyPrice,
          date: date
        });
      }
      if (prevL >= prevS && l < s && i < line.length - 1) {
        date = data[i][0];
        open = data[i][2];
        buyPrice = open;
        orders.push({
          action: "sell",
          price: buyPrice,
          date: date
        });
      }
    }
    return orders;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = line.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  checkEarn = function(orders){
    var storage, money, useMoney, rate, gas, i$, len$, order, price, cost, earn, earnRate, earnRateAvg, transactionTime, useMoneyPerTranaction, totalEarn, totalEarnRate;
    storage = 0;
    money = 0;
    useMoney = 0;
    rate = [];
    gas = 0.001425;
    for (i$ = 0, len$ = orders.length; i$ < len$; ++i$) {
      order = orders[i$];
      if (order.action === "buy") {
        if (storage !== 0) {
          console.log("has storage");
        } else {
          price = order.price;
          cost = price + price * gas;
          money -= cost;
          useMoney = cost;
          storage = price;
        }
      }
      if (order.action === "sell") {
        if (storage === 0) {
          console.log("no storage");
        } else {
          price = order.price;
          earn = price - price * gas;
          money += earn;
          earnRate = (earn - useMoney) / useMoney;
          storage = 0;
          rate.push(earnRate);
        }
      }
    }
    earnRateAvg = rate.reduce(function(a, b){
      return a + b;
    }, 0) / rate.length;
    transactionTime = rate.length;
    useMoneyPerTranaction = 100000;
    totalEarn = (useMoneyPerTranaction * earnRateAvg) * transactionTime;
    totalEarnRate = (totalEarn + useMoneyPerTranaction) / useMoneyPerTranaction;
    return {
      price: storage,
      amount: storage !== 0 ? useMoneyPerTranaction / storage : 0,
      moneyFlow: money + storage,
      ratePerTx: earnRateAvg,
      earn: totalEarn,
      earnRate: totalEarnRate,
      times: rate.length
    };
  };
  app = express();
  app.set('port', 8080);
  app.set('views', path.join(__dirname, '/views'));
  app.set('view engine', 'vash');
  app.get('/view/stock/:year/:cnt/:stockId', function(req, res){
    var stockId, year, cnt;
    stockId = req.params.stockId;
    year = req.params.year;
    cnt = parseInt(req.params.cnt);
    return fetchStockData(stockId, [year], (function(){
      var i$, to$, results$ = [];
      for (i$ = 1, to$ = cnt; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()), function(err, data){
      var stockData, line25, res$, i$, to$, line50, line75, line0, close, ma5, ma10, ref$, kdK, kdD, ema5, ema10, dif, dem, bbi, chaikin, uos, checks, len$, name, l, l2, l3, e;
      if (err) {
        return res.json(err);
      }
      try {
        stockData = formatStockData(
        data);
        res$ = [];
        for (i$ = 0, to$ = stockData.length; i$ < to$; ++i$) {
          res$.push(25);
        }
        line25 = res$;
        res$ = [];
        for (i$ = 0, to$ = stockData.length; i$ < to$; ++i$) {
          res$.push(50);
        }
        line50 = res$;
        res$ = [];
        for (i$ = 0, to$ = stockData.length; i$ < to$; ++i$) {
          res$.push(75);
        }
        line75 = res$;
        res$ = [];
        for (i$ = 0, to$ = stockData.length; i$ < to$; ++i$) {
          res$.push(0);
        }
        line0 = res$;
        close = Close(
        stockData);
        ma5 = MA(5, close);
        ma10 = MA(10, close);
        ref$ = KD(RSV(9, stockData)), kdK = ref$[0], kdD = ref$[1];
        ema5 = EMA(2, close);
        ema10 = EMA(20, close);
        dif = MACDDIF(12, 26, close);
        dem = MACDDEM(9, dif);
        bbi = BBI(3, 6, 12, 24, close);
        chaikin = Chaikin(3, 10, stockData);
        uos = UOS(5, 10, 20, stockData);
        checks = [["ma", ma5, ma10, ma10], ["kd", kdK, kdD, kdD], ["macd", dif, dem, dem], ["bbi", close, bbi, bbi], ["chaikin", chaikin, line0, line0], ["uos", uos, line50, line50]];
        for (i$ = 0, len$ = checks.length; i$ < len$; ++i$) {
          ref$ = checks[i$], name = ref$[0], l = ref$[1], l2 = ref$[2], l3 = ref$[3];
          console.log(name);
          console.log(checkEarn(
          checkSignal(l, l2, l3, stockData)));
        }
        /*
        for [line1, line2] in [[ma5, ma10], [kd[0], kd[1]], [ema5, ema10], [dif, dem], [close, bbi]]
            checkSignal line1, line2, stockData |>
            checkEarn |>
            console.log
        */
        return res.render("kline2", {
          data: JSON.stringify(stockData),
          close: JSON.stringify(close),
          ma5: JSON.stringify(ma5),
          ma10: JSON.stringify(ma10),
          kdK: JSON.stringify(kdK),
          kdD: JSON.stringify(kdD),
          ema5: JSON.stringify(ema5),
          ema10: JSON.stringify(ema10),
          macdDem: JSON.stringify(dem),
          macdDif: JSON.stringify(dif),
          bbi: JSON.stringify(bbi),
          chaikin: JSON.stringify(chaikin),
          uos: JSON.stringify(uos)
        });
      } catch (e$) {
        e = e$;
        console.log(e);
        return res.json('error');
      }
    });
  });
  app.get('/', function(req, res){
    return res.render('index', {
      title: "[['Mon', 20, 28, 38, 45]]",
      data: "[['Mon', 20, 28, 38, 45],['Tue', 31, 38, 55, 66],['Wed', 50, 55, 77, 80],['Thu', 77, 77, 66, 50],['Fri', 68, 66, 22, 15]]"
    });
  });
  app.listen(8080);
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
