// Generated by LiveScript 1.6.0
(function(){
  var path, request, crypto, async, fs, fetch, fetchStockData, formatStockData, out$ = typeof exports != 'undefined' && exports || this;
  path = require('path');
  request = require('request');
  crypto = require('crypto');
  async = require('async');
  fs = require('fs');
  out$.fetch = fetch = curry$(function(url, dontUseCache, cb){
    var urlKey, path, ws;
    urlKey = crypto.createHash('md5').update(url).digest('hex');
    path = "cache/" + urlKey + ".html";
    if (!!dontUseCache === false && fs.existsSync(path)) {
      return fs.readFile(path, 'utf8', cb);
    } else {
      ws = fs.createWriteStream(path).on('error', cb).on('finish', function(){
        if (fs.existsSync(path) === false) {
          return cb('save lost');
        } else {
          return fs.readFile(path, 'utf8', cb);
        }
      });
      return request.get(url).on('error', cb).pipe(ws);
    }
  });
  out$.fetchStockData = fetchStockData = curry$(function(stockId, years, months, cb){
    var urls, y, m;
    urls = Array.prototype.map.call((function(){
      var i$, ref$, len$, j$, ref1$, len1$, results$ = [];
      for (i$ = 0, len$ = (ref$ = years).length; i$ < len$; ++i$) {
        y = ref$[i$];
        for (j$ = 0, len1$ = (ref1$ = months).length; j$ < len1$; ++j$) {
          m = ref1$[j$];
          results$.push([y, m]);
        }
      }
      return results$;
    }()), function(arg$){
      var y, m;
      y = arg$[0], m = arg$[1];
      return "http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=" + y + (m + '').padStart(2, '0') + "01&stockNo=" + stockId;
    });
    return async.series(urls.map(function(url){
      return fetch(url, false);
    }), function(err, results){
      return cb(err, results);
    });
  });
  out$.formatStockData = formatStockData = function(data){
    var format;
    data = data.filter(function(r){
      return r.trim() !== "";
    }).map(JSON.parse).filter(function(arg$){
      var stat;
      stat = arg$.stat;
      return stat === "OK";
    }).reduce(function(acc, arg$){
      var data;
      data = arg$.data;
      return acc.concat(data);
    }, []);
    format = function(arg$){
      var openTime, _, open, high, low, close, volumn, tmp, y, m, d;
      openTime = arg$[0], _ = arg$[1], _ = arg$[2], open = arg$[3], high = arg$[4], low = arg$[5], close = arg$[6], _ = arg$[7], volumn = arg$[8];
      tmp = new Date(openTime);
      y = tmp.getFullYear() + 1911;
      m = tmp.getMonth() + 1;
      d = tmp.getDay() + 1;
      return [new Date(y + "/" + m + "/" + d).getTime()].concat([low, open, close, high, volumn].map(parseFloat));
    };
    return data.map(format);
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
