// Generated by LiveScript 1.6.0
(function(){
  var Close, Low, High, Mid, Volume, avg, MA, RSV, KD, reductions, mapn, YuMA, EMA, MACDDIF, MACDDEM, BBI, EBBI, AccDist, Chaikin, TrueLow, TrueWave, UOS, Volatility, Trix, StandardDeviation, ZScore, YuClock, out$ = typeof exports != 'undefined' && exports || this;
  out$.Close = Close = function(data){
    return data.map(function(arg$){
      var _, close;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], close = arg$[3];
      return close;
    });
  };
  out$.Low = Low = function(data){
    return data.map(function(arg$){
      var _, low;
      _ = arg$[0], low = arg$[1], _ = arg$[2], _ = arg$[3];
      return low;
    });
  };
  out$.High = High = function(data){
    return data.map(function(arg$){
      var _, high;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], high = arg$[4];
      return high;
    });
  };
  out$.Mid = Mid = function(data){
    return mapn(function(a, b){
      return (a + b) / 2;
    }, High(data), Low(data));
  };
  out$.Volume = Volume = function(data){
    return data.map(function(arg$){
      var _, volume;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], _ = arg$[4], volume = arg$[5];
      return volume;
    });
  };
  out$.avg = avg = function(data){
    return data.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0) / data.length;
  };
  out$.MA = MA = function(cnt, data){
    var ret, res$, i$, ref$, len$, i, avg;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      res$.push(avg = data.slice(i - (cnt - 1), i + 1).reduce(fn1$, 0) / cnt);
    }
    ret = res$;
    return (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = cnt - 1; i$ < to$; ++i$) {
        results$.push(ret[0]);
      }
      return results$;
    }()).concat(ret);
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = cnt - 1, to$ = data.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(acc, curr){
      return acc + curr;
    }
  };
  out$.RSV = RSV = function(cnt, data){
    var ret, res$, i$, ref$, len$, i, ref1$, openTime, low, open, close, high, before9k, min9k, max9k, rsv;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      ref1$ = data[i], openTime = ref1$[0], low = ref1$[1], open = ref1$[2], close = ref1$[3], high = ref1$[4];
      before9k = data.slice(i - (cnt - 1), i + 1);
      min9k = Math.min.apply(null, before9k.map(fn1$));
      max9k = Math.max.apply(null, before9k.map(fn2$));
      res$.push(rsv = (close - min9k) * 100 / (max9k - min9k));
    }
    ret = res$;
    return (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = cnt - 1; i$ < to$; ++i$) {
        results$.push(ret[0]);
      }
      return results$;
    }()).concat(ret);
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = cnt - 1, to$ = data.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(arg$){
      var _, low;
      _ = arg$[0], low = arg$[1];
      return low;
    }
    function fn2$(arg$){
      var _, high;
      _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], high = arg$[4];
      return high;
    }
  };
  out$.KD = KD = function(data){
    var kline, dline, i$, ref$, len$, i, rsv, prevK, prevD, k, d;
    kline = [];
    dline = [];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      rsv = data[i];
      prevK = i > 0 ? kline[i - 1] : 50;
      prevD = i > 0 ? dline[i - 1] : 50;
      k = prevK * (2 / 3) + rsv / 3;
      d = prevD * (2 / 3) + k / 3;
      kline.push(k);
      dline.push(d);
    }
    return [kline, dline];
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = data.length; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  out$.reductions = reductions = function(f, i, seq){
    return seq.reduce(function(acc, v){
      var prev, curr;
      prev = acc[acc.length - 1];
      curr = f(prev, v);
      return acc.concat([curr]);
    }, [i]);
  };
  out$.mapn = mapn = function(f){
    var args, res$, i$, to$, maxLength, ref$, len$, i, results$ = [];
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    maxLength = Math.min.apply(null, args.map(function(it){
      return it.length;
    }));
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      results$.push(f.apply(null, args.map(fn1$)));
    }
    return results$;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = maxLength; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(ary){
      return ary[i];
    }
  };
  out$.YuMA = YuMA = function(n, data){
    var fv, ret;
    if (data.length >= n) {
      fv = data.slice(0, n).reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / n;
      ret = reductions(function(ma, v){
        return ma * ((n - 1) / n) + v / n;
      }, fv, data.slice(n, data.length));
      return (function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = n - 1; i$ < to$; ++i$) {
          results$.push(ret[0]);
        }
        return results$;
      }()).concat(ret);
    }
  };
  out$.EMA = EMA = function(n, data){
    var fv, alpha, ret;
    if (data.length >= n) {
      fv = data.slice(0, n).reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / n;
      alpha = 2 / (n + 1);
      ret = reductions(function(ema, v){
        return (v - ema) * alpha + ema;
      }, fv, data.slice(n, data.length));
      return (function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = n - 1; i$ < to$; ++i$) {
          results$.push(ret[0]);
        }
        return results$;
      }()).concat(ret);
    }
  };
  out$.MACDDIF = MACDDIF = function(n, m, data){
    return mapn(curry$(function(x$, y$){
      return x$ - y$;
    }), EMA(n, data), EMA(m, data));
  };
  out$.MACDDEM = MACDDEM = EMA;
  out$.BBI = BBI = function(n, m, o, p, data){
    var l1, l2, l3, l4;
    l1 = MA(n, data);
    l2 = MA(m, data);
    l3 = MA(o, data);
    l4 = MA(p, data);
    return mapn(function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return args.reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / args.length;
    }, l1, l2, l3, l4);
  };
  out$.EBBI = EBBI = function(n, m, o, p, data){
    var l1, l2, l3, l4;
    l1 = EMA(n, data);
    l2 = EMA(m, data);
    l3 = EMA(o, data);
    l4 = EMA(p, data);
    return mapn(function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return args.reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0) / args.length;
    }, l1, l2, l3, l4);
  };
  out$.AccDist = AccDist = function(data){
    var ret;
    ret = reductions(curry$(function(x$, y$){
      return x$ + y$;
    }), 0, data.map(function(arg$){
      var _, low, open, close, high, volume;
      _ = arg$[0], low = arg$[1], open = arg$[2], close = arg$[3], high = arg$[4], volume = arg$[5];
      if (high === low) {
        return 0;
      } else {
        return ((close - low) - (high - close)) * volume / (high - low);
      }
    }));
    return ret.slice(1, ret.length);
  };
  out$.Chaikin = Chaikin = function(n, m, data){
    var acc;
    acc = AccDist(data);
    return mapn(curry$(function(x$, y$){
      return x$ - y$;
    }), EMA(n, acc), EMA(m, acc));
  };
  out$.TrueLow = TrueLow = function(data){
    var ret;
    ret = mapn(Math.min, Close(data), Low(data.slice(1, data.length)));
    return Low([data[0]]).concat(ret);
  };
  out$.TrueWave = TrueWave = function(data){
    var ret;
    ret = mapn(function(close, high, low){
      return Math.max(high - low, Math.abs(high - close), Math.abs(low - close));
    }, Close(data), High(data).slice(1, data.length), Low(data).slice(1, data.length));
    return High([data[0]]).concat(ret);
  };
  out$.UOS = UOS = function(m, n, o, data){
    var tl, bp, tr, ruo, uos;
    tl = TrueLow(data);
    bp = mapn(curry$(function(x$, y$){
      return x$ - y$;
    }), Close(data), tl);
    tr = TrueWave(data);
    ruo = mapn(function(b1, b2, b3, t1, t2, t3){
      return (b1 / t1) * 4 + (b2 / t2) * 2 + b3 / t3;
    }, MA(m, bp).map((function(it){
      return it * m;
    })), MA(n, bp).map((function(it){
      return it * n;
    })), MA(o, bp).map((function(it){
      return it * o;
    })), MA(m, tr).map((function(it){
      return it * m;
    })), MA(n, tr).map((function(it){
      return it * n;
    })), MA(o, tr).map((function(it){
      return it * o;
    })));
    return uos = ruo.map(function(n){
      return n * (100 / 7);
    });
  };
  out$.Volatility = Volatility = function(data){
    var ret;
    ret = mapn(function(prev, curr){
      return (curr - prev) / prev;
    }, data, data.slice(1, data.length));
    return [ret[0]].concat(ret);
  };
  out$.Trix = Trix = function(n, m, data){
    var tr, trix, matrix;
    tr = EMA(n, EMA(n, EMA(n, Close(data))));
    trix = Volatility(tr);
    matrix = EMA(m, trix);
    return [trix, matrix];
  };
  out$.StandardDeviation = StandardDeviation = function(avg, data){
    var v1, v2, v3;
    v1 = data.map(function(v){
      return Math.pow(v - avg, 2);
    }).reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0);
    v2 = v1 / (data.length - 1);
    return v3 = Math.sqrt(v2);
  };
  out$.ZScore = ZScore = function(avg, sd, data){
    return data.map(function(v){
      return (v - avg) / sd;
    });
  };
  out$.YuClock = YuClock = function(startN, n, data){
    var ps, psAvg, psSd, psZ, vs, vsAvg, vsSd, vsZ, axis, dot, length, normalize, projs;
    ps = MA(n, Close(data));
    psAvg = avg(ps.slice(0, startN));
    psSd = StandardDeviation(psAvg, ps.slice(0, startN));
    psZ = ZScore(psAvg, psSd, ps);
    vs = MA(n, Volume(data));
    vsAvg = avg(vs.slice(0, startN));
    vsSd = StandardDeviation(vsAvg, vs.slice(0, startN));
    vsZ = ZScore(vsAvg, vsSd, vs);
    ps = mapn(function(){
      var args, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      return args;
    }, vsZ, psZ);
    axis = [0.707, 0.707];
    dot = function(l1, l2){
      return mapn(curry$(function(x$, y$){
        return x$ * y$;
      }), l1, l2).reduce(curry$(function(x$, y$){
        return x$ + y$;
      }), 0);
    };
    length = function(line){
      return Math.sqrt(dot(line, line));
    };
    normalize = function(line){
      var len;
      len = length(line);
      if (len === 0) {
        return line;
      } else {
        return line.map((function(it){
          return it / len;
        }));
      }
    };
    projs = mapn(function(prev, curr){
      var dir;
      dir = mapn(curry$(function(x$, y$){
        return x$ - y$;
      }), curr, prev);
      return dot(normalize(dir), axis);
    }, ps, ps.slice(1, ps.length));
    return [projs[0]].concat(projs);
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
