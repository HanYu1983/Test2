// Generated by LiveScript 1.6.0
(function(){
  var request, async, getUrl;
  request = require('request');
  async = require('async');
  getUrl = curry$(function(url, cb){
    var options, callback;
    options = {
      url: url,
      method: 'GET',
      headers: {
        'User-Agent': 'request'
      }
    };
    callback = function(error, response, body){
      if (error) {
        return cb(error);
      } else {
        return cb(null, JSON.parse(body));
      }
    };
    return request(options, callback);
  });
  getUrl('https://api.binance.com/api/v1/depth?symbol=BTCUSDT', function(err, arg$){
    var bids, asks, sell1;
    bids = arg$.bids, asks = arg$.asks;
    console.log(bids);
    sell1 = parseFloat(asks[0][0]);
    return getUrl('https://api.huobipro.com/market/depth?symbol=btcusdt&type=step0', function(err, arg$){
      var ref$, bids, asks, buy1, sellPrice, buyPrice, updatePrice;
      ref$ = arg$.tick, bids = ref$.bids, asks = ref$.asks;
      console.log(bids);
      buy1 = parseFloat(bids[0][0]);
      console.log(buy1, sell1);
      sellPrice = buy1;
      buyPrice = sell1;
      if (sellPrice > buyPrice) {
        console.log('you can move!');
      } else {
        console.log('can not move!');
      }
      /*
      (err, body) <- getUrl 'https://api.binance.com/api/v3/ticker/bookTicker?symbol=BTCUSDT'
      console.log(body)
      
      (err, body) <- getUrl 'https://api.huobipro.com/market/detail?symbol=btcusdt'
      console.log(body)
      
      (err, body) <- getUrl 'https://api.huobipro.com/market/depth?symbol=btcusdt&type=step1'
      console.log(body)
      */
      return updatePrice = function(cb){
        return async.parallel([getUrl('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT'), getUrl('https://api.binance.com/api/v3/ticker/bookTicker?symbol=BTCUSDT'), getUrl('https://api.huobipro.com/market/detail?symbol=btcusdt'), getUrl('https://api.huobipro.com/market/depth?symbol=btcusdt&type=step1')], function(err, results){
          var binanceNow, binanceBid, huobiNow, huobiBid;
          binanceNow = results[0], binanceBid = results[1], huobiNow = results[2], huobiBid = results[3];
          console.log(binanceNow.price);
          console.log(binanceBid.bidPrice);
          console.log(huobiNow.tick.close);
          return console.log(huobiBid.tick.bids[0][0]);
        });
      };
    });
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
