// Generated by LiveScript 1.6.0
(function(){
  var WebSocket, pako, signalR, zlib, x$, bittrexWs;
  WebSocket = require('ws');
  pako = require('pako');
  signalR = require('signalr-client');
  zlib = require('zlib');
  /*
  binanceWs = new WebSocket 'wss://stream.binance.com:9443/ws/btcusdt@depth10'
      ..on 'open', ->
          console.log 'open'
  
      ..on 'close', ->
          console.log 'close'
      
      ..on 'message', (data) ->
          console.log JSON.parse(data)
          
      ..on 'error', (err) ->
          console.log err
  
  */
  /*
  huobiWs = new WebSocket 'wss://api.huobi.pro/ws'
      ..on 'open', ->
          console.log 'open'
          sendData = 
              {sub: 'market.btcusdt.depth.step0', id: 'xx20'} |>
              JSON.stringify _
          huobiWs.send(sendData, (err)->console.log(err))
          
      ..on 'close', ->
          console.log 'close'
  
      ..on 'message', (buf) ->
          data = 
              pako.inflate(buf, {to:'string'}) |> 
              JSON.parse _
          # console.log data
          
          if data.hasOwnProperty "ping"
              {ping} = data
              sendData = 
                  {pong: ping} |>
                  JSON.stringify _
              huobiWs.send(sendData, (err)->console.log(err))
          
          if data['ch'] == 'market.btcusdt.depth.step0'
              {tick:{bids, asks}} = data
              console.log bids
              
      ..on 'error', (err) ->
          console.log err
  */
  /*
  if (data.hasOwnProperty ('M')) {
      if (data.M[0]) {
        if (data.M[0].hasOwnProperty ('A')) {
          if (data.M[0].A[0]) {
            b64 = data.M[0].A[0];
            raw = new Buffer.from(b64, 'base64');
  
            zlib.inflateRaw (raw, function (err, inflated) {
              if (! err) {
                json = JSON.parse (inflated.toString ('utf8'));
                console.log (json);
              }
            });
          }
        }
      }
  */
  x$ = bittrexWs = new signalR.client('wss://socket.bittrex.com/signalr', ['c2']);
  x$.serviceHandlers.connected = function(conn){
    var x$, y$;
    console.log('connected');
    x$ = bittrexWs.call('c2', 'QueryExchangeState', 'USDT-BTC');
    x$.done(function(err, result){
      if (err != null) {
        return console.log(err);
      }
      return zlib.inflateRaw(new Buffer.from(result, 'base64'), function(err, inflated){
        var data;
        data = JSON.parse(inflated.toString('utf8'));
        return console.log(data);
      });
    });
    y$ = bittrexWs.call('c2', 'SubscribeToExchangeDeltas', 'USDT-BTC');
    y$.done(function(err, result){
      if (err != null) {
        return console.log(err);
      }
    });
    return y$;
  };
  x$.serviceHandlers.messageReceived = function(msg){
    var data, ref$, ref1$, ref2$, b64, buf;
    data = JSON.parse(msg.utf8Data);
    if (((ref$ = data.M) != null ? (ref1$ = ref$[0]) != null ? (ref2$ = ref1$.A) != null ? ref2$[0] : void 8 : void 8 : void 8) != null) {
      b64 = data.M[0].A[0];
      buf = new Buffer.from(b64, 'base64');
      return zlib.inflateRaw(buf, function(err, inflated){
        var data;
        if (err) {
          console.log(err);
        }
        data = JSON.parse(inflated.toString('utf8'));
        return console.log(data);
      });
    }
  };
}).call(this);
