// Generated by LiveScript 1.6.0
(function(){
  var mapn, drawer, out$ = typeof exports != 'undefined' && exports || this;
  mapn = function(f){
    var args, res$, i$, to$, minLength, ref$, len$, i, results$ = [];
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    minLength = Math.min.apply(null, args.map(function(it){
      return it.length;
    }));
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      results$.push(f.apply(null, args.map(fn1$)));
    }
    return results$;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = minLength; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(ary){
      return ary[i];
    }
  };
  out$.drawer = drawer = function(){
    var Open, Close, Low, High, Mid, Volume, maxV, minV, length, graphicBase, drawIt;
    Open = function(data){
      return data.map(function(arg$){
        var _, open;
        _ = arg$[0], _ = arg$[1], open = arg$[2], _ = arg$[3];
        return open;
      });
    };
    Close = function(data){
      return data.map(function(arg$){
        var _, close;
        _ = arg$[0], _ = arg$[1], _ = arg$[2], close = arg$[3];
        return close;
      });
    };
    Low = function(data){
      return data.map(function(arg$){
        var _, low;
        _ = arg$[0], low = arg$[1], _ = arg$[2], _ = arg$[3];
        return low;
      });
    };
    High = function(data){
      return data.map(function(arg$){
        var _, high;
        _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], high = arg$[4];
        return high;
      });
    };
    Mid = function(data){
      return mapn(function(a, b){
        return (a + b) / 2;
      }, High(data), Low(data));
    };
    Volume = function(data){
      return data.map(function(arg$){
        var _, volume;
        _ = arg$[0], _ = arg$[1], _ = arg$[2], _ = arg$[3], _ = arg$[4], volume = arg$[5];
        return volume;
      });
    };
    maxV = function(arg$){
      var type, line, kline;
      type = arg$.type, line = arg$.line, kline = arg$.kline;
      switch (type) {
      case "grid":
      case "kline":
        return Math.max.apply(null, High(kline));
      case "line":
        return Math.max.apply(null, line);
      default:
        return 0;
      }
    };
    minV = function(arg$){
      var type, line, kline;
      type = arg$.type, line = arg$.line, kline = arg$.kline;
      switch (type) {
      case "grid":
      case "kline":
        return Math.min.apply(null, Low(kline));
      case "line":
        return Math.min.apply(null, line);
      default:
        return 0;
      }
    };
    length = function(arg$){
      var type, line, kline;
      type = arg$.type, line = arg$.line, kline = arg$.kline;
      switch (type) {
      case "grid":
        if (line) {
          return line.length;
        }
        return kline.length;
      case "line":
        return line.length;
      case "kline":
        return kline.length;
      default:
        return 0;
      }
    };
    graphicBase = function(w, h, drawers){
      var max, min, len, offset, offsetX, posY;
      max = Math.max.apply(null, drawers.map(maxV));
      min = Math.min.apply(null, drawers.map(minV));
      len = Math.max.apply(null, drawers.map(length));
      offset = max - min;
      offsetX = w / (len + 1);
      posY = function(v){
        return (1 - (v - min) / offset) * h;
      };
      return [w, h, max, min, offset, offsetX, posY];
    };
    drawIt = function(arg$, base, ctx){
      var type, line, color, offset, hideY, style, kline, info, centerY, w, h, maxV, minV, offsetV, offsetX, posY, cnt, cntx, x$, i$, ref$, len$, i, v, y, y$, z$, posx, z1$, z2$, z3$, ref1$, idx, value, z4$, prev, curr, z5$, ref2$, date, low, open, close, high, volume, z6$, results$ = [], results1$ = [];
      type = arg$.type, line = arg$.line, color = arg$.color, offset = arg$.offset, hideY = arg$.hideY, style = arg$.style, kline = arg$.kline, info = arg$.info, centerY = arg$.centerY;
      w = base[0], h = base[1], maxV = base[2], minV = base[3], offsetV = base[4], offsetX = base[5], posY = base[6];
      switch (type) {
      case "grid":
        cnt = 10;
        cntx = 1;
        offset = (maxV - minV) / cnt;
        x$ = ctx;
        x$.strokeStyle = color;
        x$.fillStyle = color;
        x$.lineWidth = 1;
        x$.beginPath();
        if (!hideY) {
          for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
            i = ref$[i$];
            v = -(centerY || minV) - i * offset;
            y = posY(v);
            y$ = ctx;
            y$.fillText(v + "", w * 1 / 3, y);
            y$.fillText(v + "", w * 2 / 3, y);
            y$.moveTo(0, y);
            y$.lineTo(w, y);
            v = (centerY || minV) + i * offset;
            y = posY(v);
            z$ = ctx;
            z$.fillText(v + "", w * 1 / 3, y);
            z$.fillText(v + "", w * 2 / 3, y);
            z$.moveTo(0, y);
            z$.lineTo(w, y);
          }
        }
        if (kline) {
          for (i$ = 0, len$ = (ref$ = (fn1$())).length; i$ < len$; ++i$) {
            i = ref$[i$];
            if (i % cntx === 0) {
              posx = offsetX / 2 + i * offsetX;
              z1$ = ctx;
              z1$.moveTo(posx, 0);
              z1$.lineTo(posx, h);
            }
          }
        }
        if (line) {
          for (i$ = 0, len$ = (ref$ = (fn2$())).length; i$ < len$; ++i$) {
            i = ref$[i$];
            if (i % cntx === 0) {
              posx = offsetX / 2 + i * offsetX;
              z2$ = ctx;
              z2$.moveTo(posx, 0);
              z2$.lineTo(posx, h);
            }
          }
        }
        return ctx.stroke();
      case "line":
        offset = offset || 0;
        style = style || "";
        z3$ = ctx;
        z3$.strokeStyle = color;
        z3$.lineWidth = 1;
        switch (style) {
        case "dot":
          ctx.fillStyle = color;
          for (i$ = 0, len$ = (ref$ = mapn(fn3$, (fn4$()), line)).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], idx = ref1$[0], value = ref1$[1];
            z4$ = ctx;
            z4$.beginPath();
            z4$.arc((idx + offset) * offsetX, posY(value), offsetX / 4, 0, 6.28, false);
            z4$.closePath();
            z4$.fill();
            results$.push(z4$);
          }
          return results$;
          break;
        default:
          ctx.beginPath();
          for (i$ = 0, len$ = (ref$ = mapn(fn5$, (fn6$()), line, line.slice(1, line.length))).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], idx = ref1$[0], prev = ref1$[1], curr = ref1$[2];
            z5$ = ctx;
            z5$.moveTo((idx + offset) * offsetX, posY(prev));
            z5$.lineTo((idx + offset + 1) * offsetX, posY(curr));
          }
          return ctx.stroke();
        }
        break;
      case "kline":
        ctx.fillStyle = "black";
        for (i$ = 0, len$ = (ref$ = mapn(fn7$, (fn8$()), kline, info || kline)).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], idx = ref1$[0], ref2$ = ref1$[1], date = ref2$[0], low = ref2$[1], open = ref2$[2], close = ref2$[3], high = ref2$[4], volume = ref2$[5], info = ref1$[2];
          z6$ = ctx;
          z6$.strokeStyle = close >= open ? "red" : "green";
          z6$.lineWidth = 2;
          z6$.beginPath();
          z6$.moveTo(idx * offsetX, posY(low));
          z6$.lineTo(idx * offsetX, posY(high));
          z6$.stroke();
          z6$.strokeStyle = close >= open ? "red" : "green";
          z6$.lineWidth = offsetX;
          z6$.beginPath();
          z6$.moveTo(idx * offsetX, posY(open));
          z6$.lineTo(idx * offsetX, posY(high) + 1);
          z6$.lineTo(idx * offsetX, posY(close));
          z6$.stroke();
          results1$.push(z6$);
        }
        return results1$;
      }
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = cnt; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
      function fn1$(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = kline.length; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
      function fn2$(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = line.length; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
      function fn3$(){
        var argv, res$, i$, to$;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        argv = res$;
        return argv;
      }
      function fn4$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = line.length; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
      function fn5$(){
        var argv, res$, i$, to$;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        argv = res$;
        return argv;
      }
      function fn6$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = line.length; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
      function fn7$(){
        var args, res$, i$, to$;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        args = res$;
        return args;
      }
      function fn8$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = kline.length; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    };
    return {
      graphicBase: graphicBase,
      drawIt: drawIt
    };
  };
}).call(this);
