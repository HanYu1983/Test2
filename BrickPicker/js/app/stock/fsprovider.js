// Generated by LiveScript 1.6.0
(function(){
  var fs, crypto, FSProvider, out$ = typeof exports != 'undefined' && exports || this;
  fs = require('fs');
  crypto = require('crypto');
  out$.FSProvider = FSProvider = (function(){
    FSProvider.displayName = 'FSProvider';
    var prototype = FSProvider.prototype, constructor = FSProvider;
    function FSProvider(arg$){
      var cacheDir;
      cacheDir = arg$.cacheDir;
      this.cacheDir = cacheDir;
    }
    FSProvider.prototype.get = function(key, cb){
      var urlKey, path;
      urlKey = crypto.createHash('md5').update(key).digest('hex');
      path = this.cacheDir + "" + urlKey + ".html";
      console.log("get:", path);
      if (!fs.existsSync(path)) {
        return cb();
      } else {
        return fs.readFile(path, 'utf8', function(err, txt){
          var json, e;
          try {
            json = JSON.parse(txt);
            json.body = Buffer.from(json.body.data);
            return cb && cb(err, json);
          } catch (e$) {
            e = e$;
            return cb && cb();
          }
        });
      }
    };
    FSProvider.prototype.set = function(key, cache, ttl, cb){
      var urlKey, path;
      urlKey = crypto.createHash('md5').update(key).digest('hex');
      path = this.cacheDir + "" + urlKey + ".html";
      console.log("set:", path);
      return fs.writeFile(path, JSON.stringify(cache), cb);
    };
    FSProvider.prototype.remove = function(key, cb){
      var urlKey, path;
      urlKey = crypto.createHash('md5').update(key).digest('hex');
      path = this.cacheDir + "" + urlKey + ".html";
      console.log("remove file " + path);
      return fs.unlink(path, cb);
    };
    FSProvider.prototype.clear = function(cb){
      console.log("clear");
      return cb && cb(err);
    };
    return FSProvider;
  }());
}).call(this);
