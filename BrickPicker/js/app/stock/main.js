// Generated by LiveScript 1.6.0
(function(){
  var express, path, async, fs, Formula, Tool, Earn, Config, writeFile, readFile, formulaKey, saveUserData_, loadUserData_, startExpress, loadConfig, startApp;
  express = require('express');
  path = require('path');
  async = require('async');
  fs = require('fs');
  Formula = require('../../stock/formula');
  Tool = require('../../stock/tool');
  Earn = require('../../stock/earn');
  Config = require('init-config');
  writeFile = function(fileName, content, cb){
    return fs.writeFile(fileName, content, cb);
  };
  readFile = function(fileName, cb){
    return fs.readFile(fileName, 'utf8', cb);
  };
  formulaKey = function(formula){
    return formula.map(function(it){
      return it.toString();
    }).reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), "");
  };
  saveUserData_ = curry$(function(cfg, userdata, cb){
    var saveDir, fileName;
    saveDir = cfg.saveDir;
    fileName = saveDir + "/userdata.json";
    return writeFile(fileName, JSON.stringify(userdata), cb);
  });
  loadUserData_ = curry$(function(cfg, cb){
    var saveDir, fileName;
    saveDir = cfg.saveDir;
    fileName = saveDir + "/userdata.json";
    if (fs.existsSync(fileName) === false) {
      return saveUserData(cb, {
        stockIds: [],
        formulas: []
      });
    }
    return readFile(fileName, function(err, data){
      var loadData, e;
      if (err) {
        return cb(err);
      }
      try {
        loadData = JSON.parse(data);
        return cb(null, loadData);
      } catch (e$) {
        e = e$;
        return cb(e);
      }
    });
  });
  startExpress = function(cfg){
    var saveUserData, loadUserData, app;
    saveUserData = saveUserData_(cfg);
    loadUserData = loadUserData_(cfg);
    app = express();
    app.set('port', 8080);
    app.set('views', path.join(__dirname, '/views'));
    app.set('view engine', 'vash');
    app.get('/fn/userdata', function(req, res){
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        return res.json([null, userdata]);
      });
    });
    app.get('/fn/addFormula/kd/:arg1', function(req, res){
      var arg1;
      arg1 = parseInt(req.params.arg1);
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        userdata.formulas.push(['kd', arg1]);
        return saveUserData(userdata, function(err){
          return res.json([err, userdata]);
        });
      });
    });
    app.get('/fn/addFormula/ma/:arg1/:arg2', function(req, res){
      var arg1, arg2;
      arg1 = parseInt(req.params.arg1);
      arg2 = parseInt(req.params.arg2);
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        userdata.formulas.push(['ma', arg1, arg2]);
        return saveUserData(userdata, function(err){
          return res.json([err, userdata]);
        });
      });
    });
    app.get('/fn/addFormula/bbi/:arg1/:arg2/:arg3/:arg4', function(req, res){
      var arg1, arg2, arg3, arg4;
      arg1 = parseInt(req.params.arg1);
      arg2 = parseInt(req.params.arg2);
      arg3 = parseInt(req.params.arg3);
      arg4 = parseInt(req.params.arg4);
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        userdata.formulas.push(['bbi', arg1, arg2, arg3, arg4]);
        return saveUserData(userdata, function(err){
          return res.json([err, userdata]);
        });
      });
    });
    app.get('/fn/removeFormula/:name', function(req, res){
      var name;
      name = req.params.name;
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        userdata.formulas = userdata.formulas.filter(function(f){
          return formulaKey(f) !== name;
        });
        return saveUserData(userdata, function(err){
          return res.json([err, userdata]);
        });
      });
    });
    app.get('/fn/addStockId/:stockId', function(req, res){
      var stockId;
      stockId = req.params.stockId;
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        userdata.stockIds[stockId] = 0;
        return saveUserData(userdata, function(err){
          return res.json([err, userdata]);
        });
      });
    });
    app.get('/fn/removeStockId/:stockId', function(req, res){
      var stockId;
      stockId = req.params.stockId;
      return loadUserData(function(err, userdata){
        if (err) {
          return res.json([err]);
        }
        delete userdata.stockIds[stockId];
        return saveUserData(userdata, function(err){
          return res.json([err, userdata]);
        });
      });
    });
    app.get('/fn/compute/:year', function(req, res){
      var year, computeOne;
      year = req.params.year;
      computeOne = curry$(function(userdata, stockId, cb){
        return Tool.fetchStockData(stockId, [year], [1, 2], cfg.cacheDir, function(err, data){
          var stockData, close, style, results, e;
          if (err) {
            return cb(err);
          }
          try {
            stockData = Tool.formatStockData(
            data);
            close = Formula.Close(
            stockData);
            style = Earn.checkStyle(stockData);
            results = userdata.formulas.map(function(formula){
              var name, arg1, arg2, arg3, arg4, ref$, kdK, kdD, signals, earn, bbi, ma1, ma2;
              name = formula[0], arg1 = formula[1], arg2 = formula[2], arg3 = formula[3], arg4 = formula[4];
              switch (name) {
              case "kd":
                ref$ = Formula.KD(Formula.RSV(arg1, stockData)), kdK = ref$[0], kdD = ref$[1];
                signals = Earn.checkSignal(kdK, kdD, kdD, stockData);
                earn = Earn.checkEarn(stockData, signals);
                return [formula, earn, signals];
              case "bbi":
                bbi = Formula.BBI(arg1, arg2, arg3, arg4, close);
                signals = Earn.checkSignal(close, bbi, bbi, stockData);
                earn = Earn.checkEarn(stockData, signals);
                return [formula, earn, signals];
              case "ma":
                ma1 = Formula.MA(arg1, close);
                ma2 = Formula.MA(arg2, close);
                signals = Earn.checkSignal(ma1, ma2, ma2, stockData);
                earn = Earn.checkEarn(stockData, signals);
                return [formula, earn, signals];
              default:

              }
            });
            return cb(null, {
              stockId: stockId,
              year: year,
              style: style,
              results: results
            });
          } catch (e$) {
            e = e$;
            console.log(e);
            return cb(e.error);
          }
        });
      });
      return loadUserData(function(err, userdata){
        var fns, res$, stockId, ref$, _;
        if (err) {
          console.log(err);
          return res.json([err]);
        }
        console.log(userdata);
        res$ = [];
        for (stockId in ref$ = userdata.stockIds) {
          _ = ref$[stockId];
          res$.push(computeOne(userdata, stockId));
        }
        fns = res$;
        return async.series(fns, function(err, data){
          if (err) {
            console.log(err);
            return res.json([err]);
          }
          return res.json([null, data]);
        });
      });
    });
    app.get('/fn/test/:stockId/:year/:count/:earnRate', function(req, res){
      var stockId, year, count, earnRate;
      stockId = req.params.stockId;
      year = req.params.year;
      count = parseInt(req.params.count);
      earnRate = parseInt(req.params.earnRate);
      return Tool.fetchStockData(stockId, [year], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], cfg.cacheDir, function(err, data){
        var stockData, cnt, earnInfo;
        if (err) {
          return res.json([err]);
        }
        stockData = Tool.formatStockData(
        data);
        cnt = Math.min(count, stockData.length);
        stockData = stockData.slice(stockData.length - cnt, stockData.length);
        earnInfo = Earn.checkLowHighEarn(earnRate, stockData);
        earnInfo.style = Earn.checkStyle(stockData);
        return res.json([null, earnInfo]);
      });
    });
    app.get('/fn/block/:ma/:mb/:range/:count/:earnRate', function(req, res){
      var count, ma, mb, range, earnRate;
      count = req.params.count;
      ma = req.params.ma;
      mb = req.params.mb;
      range = req.params.range;
      earnRate = parseInt(req.params.earnRate);
      return Tool.fetch(("https://api.binance.com/api/v1/klines?interval=" + range + "&limit=" + count + "&symbol=") + mb.toUpperCase() + ma.toUpperCase(), cfg.cacheDir, function(err, data){
        var format, stockData, earnInfo;
        if (err) {
          return res.json([err.error]);
        }
        format = function(arg$){
          var openTime, open, high, low, close;
          openTime = arg$[0], open = arg$[1], high = arg$[2], low = arg$[3], close = arg$[4];
          return [new Date(openTime).toString()].concat([low, open, close, high].map(parseFloat));
        };
        stockData = Array.prototype.map.call(JSON.parse(data), format);
        earnInfo = Earn.checkLowHighEarn(earnRate, stockData);
        earnInfo.style = Earn.checkStyle(stockData);
        return res.json([null, earnInfo]);
      });
    });
    return app.listen(8080);
  };
  loadConfig = function(){
    var defaults, config1, config2, e;
    defaults = Config.Defaults({
      configPath: Config.Value('./config.json', Config.CLI(['configPath', 'cp'], 'path to load config'))
    });
    config1 = Config.init(defaults);
    try {
      config2 = Config.init(config1.configPath);
      return [null, config2];
    } catch (e$) {
      e = e$;
      console.log(defaults.toTerminal());
      return [e];
    }
  };
  startApp = function(){
    var ref$, err, config;
    ref$ = loadConfig(), err = ref$[0], config = ref$[1];
    if (err) {
      return console.log(err);
    }
    console.log(config);
    startExpress(config);
    return console.log('startApp');
  };
  startApp();
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
