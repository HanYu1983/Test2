// Generated by LiveScript 1.6.0
(function(){
  var express, path, request, async, getUrl, app, slice$ = [].slice;
  express = require('express');
  path = require('path');
  request = require('request');
  async = require('async');
  getUrl = curry$(function(url, cb){
    var options, callback;
    console.log(url);
    options = {
      url: url,
      method: 'GET',
      headers: {
        'User-Agent': 'request'
      }
    };
    callback = function(error, response, body){
      if (error) {
        return cb(error);
      } else {
        return cb(null, JSON.parse(body));
      }
    };
    return request(options, callback);
  });
  app = express();
  app.set('port', 8080);
  app.set('views', path.join(__dirname, '/views'));
  app.set('view engine', 'vash');
  app.get('/view/stock/:cnt/:stockId', function(req, res){
    var stockId, cnt;
    stockId = req.params.stockId;
    cnt = parseInt(req.params.cnt);
    return async.series((function(){
      var i$, to$, results$ = [];
      for (i$ = 1, to$ = cnt; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()).map(function(m){
      return getUrl("http://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=2017" + (m + '').padStart(2, '0') + "01&stockNo=" + stockId);
    }), function(err, results){
      var data, format;
      if (err) {
        return res.json(err);
      } else {
        data = results.reduce(function(acc, arg$){
          var data;
          data = arg$.data;
          return acc.concat(data);
        }, []);
        format = function(arg$){
          var openTime, _, _2, open, high, low, close;
          openTime = arg$[0], _ = arg$[1], _2 = arg$[2], open = arg$[3], high = arg$[4], low = arg$[5], close = arg$[6];
          return [new Date(openTime).toString()].concat([low, open, close, high].map(parseFloat));
        };
        data = JSON.stringify(partialize$.apply(Array.prototype.map, [Array.prototype.map.call, [void 8, format], [0]])(
        data));
        return res.render("kline", {
          data: data
        });
      }
    });
  });
  app.get('/view/kline/:ma/:mb/:range/:count', function(req, res){
    var count, ma, mb, range;
    count = req.params.count;
    ma = req.params.ma;
    mb = req.params.mb;
    range = req.params.range;
    return getUrl(("https://api.binance.com/api/v1/klines?interval=" + range + "&limit=" + count + "&symbol=") + mb.toUpperCase() + ma.toUpperCase(), function(err, data){
      var format;
      if (err) {
        return res.render('error');
      } else {
        format = function(arg$){
          var openTime, open, high, low, close;
          openTime = arg$[0], open = arg$[1], high = arg$[2], low = arg$[3], close = arg$[4];
          return [new Date(openTime).toString()].concat([low, open, close, high].map(parseFloat));
        };
        data = JSON.stringify(partialize$.apply(Array.prototype.map, [Array.prototype.map.call, [void 8, format], [0]])(
        data));
        return res.render("kline", {
          data: data
        });
      }
    });
  });
  app.get('/', function(req, res){
    return res.render('index', {
      title: "[['Mon', 20, 28, 38, 45]]",
      data: "[['Mon', 20, 28, 38, 45],['Tue', 31, 38, 55, 66],['Wed', 50, 55, 77, 80],['Thu', 77, 77, 66, 50],['Fri', 68, 66, 22, 15]]"
    });
  });
  app.listen(8080);
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);
