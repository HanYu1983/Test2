// Generated by LiveScript 1.6.0
(function(){
  var request, crypto, ApiKey, moment, getUrl, binanceApiOption, binanceSignedOption, huobiSignedOption, out$ = typeof exports != 'undefined' && exports || this;
  request = require('request');
  crypto = require('crypto');
  ApiKey = require('../private/apiKey');
  moment = require('moment');
  out$.getUrl = getUrl = curry$(function(opt, cb){
    var callback;
    callback = function(error, response, body){
      if (error) {
        return cb(error);
      } else {
        return cb(null, body);
      }
    };
    return request(opt, callback);
  });
  out$.binanceApiOption = binanceApiOption = function(url, data, method){
    var query, opt;
    query = Object.keys(data).reduce(function(a, k){
      return a.concat([k + "=" + encodeURIComponent(data[k])]);
    }, []).join("&");
    return opt = {
      url: url + '?' + query,
      qs: data,
      method: method,
      timeout: 5000,
      headers: {
        'Content-type': "application/x-www-form-urlencoded",
        'X-MBX-APIKEY': ApiKey.binance.ApiKey
      }
    };
  };
  out$.binanceSignedOption = binanceSignedOption = function(url, data, method){
    var query, signature, opt;
    data.timestamp = new Date().getTime();
    data.recvWindow = 5000;
    query = Object.keys(data).reduce(function(a, k){
      return a.concat([k + "=" + encodeURIComponent(data[k])]);
    }, []).join("&");
    signature = crypto.createHmac('sha256', ApiKey.binance.SecretKey).update(query).digest('hex');
    return opt = {
      url: url + '?' + query + '&signature=' + signature,
      qs: data,
      method: method,
      timeout: 5000,
      headers: {
        'Content-type': "application/x-www-form-urlencoded",
        'X-MBX-APIKEY': ApiKey.binance.ApiKey
      }
    };
  };
  out$.huobiSignedOption = huobiSignedOption = function(baseurl, path, args, method){
    var data, k, v, p, meta, hash, signature, opt;
    data = {
      AccessKeyId: ApiKey.huobi.AccessKey,
      SignatureMethod: "HmacSHA256",
      SignatureVersion: 2,
      Timestamp: moment.utc().format('YYYY-MM-DDTHH:mm:ss')
    };
    if (method === "GET") {
      for (k in args) {
        v = args[k];
        data[k] = v;
      }
    }
    p = Object.keys(data).reduce(function(a, k){
      return a.concat([k + "=" + encodeURIComponent(data[k])]);
    }, []).sort().join("&");
    meta = [method, baseurl, path, p].join('\n');
    hash = crypto.createHmac('sha256', ApiKey.huobi.SecretKey).update(meta).digest('base64');
    signature = encodeURIComponent(hash);
    if (method === "POST") {
      for (k in args) {
        v = args[k];
        data[k] = v;
      }
    }
    return opt = {
      url: "https://" + baseurl + path + "?" + p + '&Signature=' + signature,
      body: JSON.stringify(data),
      method: method,
      timeout: 5000,
      headers: {
        'Content-type': "application/json"
      }
    };
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
